#!/bin/sh
if ! git rev-parse --git-dir > /dev/null 2>&1;then
echo "Not a Git Repo , make it a git repo to use this command"
exit 1;
fi
if [ ! -d $(git rev-parse --git-dir)/.migit ];then
  echo "directory path not set - use 'git configure-path' to set the directory path"
  exit 1;
fi  
res="$(cat $(git rev-parse --git-dir)/path | wc -l)"
if [ $res -eq 0 ];then
  echo "Migit not installed , run 'git migit'";
  exit 1;
fi
args=$#
if [ $# = 0 ];then
echo " see 'git migit help' "
exit 1;
fi

if [ $# -gt 0 ];then
case "$1" in
help) echo "OPTIONS  
 ----- show [file]  [hash] - Show file content for a Hash
 ----- show [file] - Show complete file history with commits
 ----- show [file]  [hash-from] [hash-to] Show file content from hash-to-hash
 ----- show [file]  [-after] [hash]  Show file content from a hash onward
 ----- show [file]  [-before] [hash] Show file content before a Hash
 ----- status Show Migration Folder Path/Contents [git dbmig status]
 ----- log   Show all migration commits
 ----- log [hash]..[hash]  Show migration commits from hash..to..hash
 ----- log [date]..[date]  Show migration commits from hash..to..hash"
         ;;
show)  
       migdir=$(basename $(cat $(git rev-parse --show-toplevel)/.git/path)) 
         if [ $# -eq 2 ];then
         
            git log --pretty=oneline | grep "@MIG" | awk '{print $1}'> TEMP_SHOW_LIST
            if [ $(cat TEMP_SHOW_LIST | wc -l) -gt 0 ];then
            for line in `cat TEMP_SHOW_LIST`;do 
                echo "-- $2  Content In  $line ";
                git show $line:$2
            done
            rm TEMP_SHOW_LIST
          else
            echo "No Migration Commits Have Occured"
            rm TEMP_SHOW_LIST
          fi
                 elif [ $# -eq 3 ];then
          

           if [ $(git log --pretty=oneline | grep "@MIG" | grep "^$3" |wc -l) -gt 0 ];then
                     echo "-- ======== $2 FILE CONTENT ========="
                     git show $3:$2
                  else
                     echo "$3 Is not a valid Migration HASH "
                  fi
                       
         elif [ $# -eq 4 ];then
           
          case "$3" in
           -before) 
                 if [ $(git log --pretty=oneline | grep "@MIG" | grep "^$4" |wc -l) -gt 0 ];then
                      git log --pretty=oneline | grep "@MIG" | awk '{print $1}'> TEMP_SHOW_LIST
                      sed -n '/^'$4'/,$p' TEMP_SHOW_LIST >AFTER_LIST
                      for line in `cat AFTER_LIST`;do 
                echo $'\n'-- $2  Content In  $line $'\n'
                git show $line:$2
                echo $'\n'
            done
            rm TEMP_SHOW_LIST
            rm AFTER_LIST
                  else
                     echo "HASH Is Not stored as a Migration"
                     exit 1;
                  fi        
                  ;;
           -after) 
                 if [ $(git log --pretty=oneline | grep "@MIG" | grep "^$4" |wc -l) -gt 0 ];then
                      git log --pretty=oneline | grep "@MIG" | awk '{print $1}'> TEMP_SHOW_LIST
                      sed -n '/^'$4'/q;p' TEMP_SHOW_LIST >BEFORE_LIST
                      for line in `cat BEFORE_LIST`;do 
                echo $'\n'-- $2  Content In  $line $'\n'
                git show $line:$2
                echo $'\n'
            done
            rm TEMP_SHOW_LIST
            rm BEFORE_LIST
                  else
                     echo "HASH Is Not stored as a Migration"
                     exit 1;
                  fi           
             ;;
           *)  
                if [ $(git log --pretty=oneline | grep "@MIG" | grep "^$3" |wc -l) -gt 0 ];then
                  if [ $(git log --pretty=oneline | grep "@MIG" | grep "^$4" |wc -l) -gt 0 ];then
                      git log $3 $4 --pretty=oneline | grep "@MIG" | awk '{print $1}' >BETWEEN_LIST
                      for line in `cat BETWEEN_LIST`;do 
                           echo $'\n' -- $2  Content In  $line $'\n\n'$(git show $line:$2)$'\n'
                      done
                      rm BETWEEN_LIST
                  else
                      echo "$4 is not a valid migration hash"
                  fi
                else
                      echo "$3 is not a valid migration hash"
                fi
                        
              ;;
           esac 
         else
             echo "--show takes arguments 
    ---- [File]
    ---- [file] [hash] 
    ---- [file] [-after/-before]  [hash]"
             exit 1;
         fi
             
    ;;
log)  
      if [ $# -eq 1 ];then
        if [ "$1" = "log" ];then
          git log --pretty=format:"%h - %an, %ar : %s" | grep "@MIG"
        else
          echo "$1 is not a valid ARGUMENT"
        fi  
      else
        echo "${*:2}"
      git log "${*:2}" --pretty=format:"%h - %an, %ar : %s" | grep " @MIG"
      fi
    ;;
status) 
       datapath="$(git rev-parse --show-toplevel)/.git/path"
       datacontent="$(cat $datapath)"
       dir="$(basename $datacontent)"
       echo 'The Migration directory is :'$dir
       find $datacontent -type f -print > $(git rev-parse --git-dir)/TEMP_STATUS
       for line in `cat $(git rev-parse --git-dir)/TEMP_STATUS`;do
       echo $'\n'--======   $line  ======= $'\n\n'$(cat $line)$'\n'
       done 
       rm $(git rev-parse --git-dir)/TEMP_STATUS  
       ;;    
*) echo "MIGIT INVALID ARGUMENT"
     echo "List of valid arguments
     [show] To Display File Contents
     [log] To List  Commits
     [status] Display Migration Folder/Contents
     [help] To get list of options"
   ;;
esac

fi

     
